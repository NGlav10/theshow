{"version":3,"sources":["api/fetch.tsx","ts/listings/listingsUtils.ts","ts/listings/components/PlayerTile.tsx","ts/listings/listingsScreen.tsx","ts/App.tsx","reportWebVitals.ts","index.tsx"],"names":["isMock","a","playerData","fetch","response","json","console","error","sortPlayers","player1","player2","getTakeHomeAmt","player","tenPercent","best_sell_price","best_buy_price","PlayerTile","listing","this","props","style","styles","tile","src","item","img","ovr","name","toFixed","React","Component","flexDirection","Board","useState","listings","setListings","useEffect","fetchPlayerData","then","data","sortedPlayers","sort","log","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAIO,WAA+BA,GAA/B,eAAAC,EAAA,0DACGD,EADH,yCAEQE,GAFR,gCAK4BC,MACnB,oFANT,cAKWC,EALX,yBAQYA,EAASC,QARrB,kCAUKC,QAAQC,MAAR,MAVL,2D,wDCFMC,EAAc,SAACC,EAAkBC,GAC1C,OAAOC,EAAeD,GAAWC,EAAeF,IAGvCE,EAAiB,SAACC,GAC3B,IAAMC,EAAsC,GAAzBD,EAAOE,gBAG1B,OAFkBF,EAAOE,gBAAkBD,EACVD,EAAOG,gB,OCDtCC,E,4JACF,WAAU,IACEC,EAAYC,KAAKC,MAAjBF,QAER,OACI,sBAAKG,MAAOC,EAAOC,KAAnB,UACI,qBAAKC,IAAKN,EAAQO,KAAKC,MACvB,+BACKR,EAAQO,KAAKE,IADlB,IACwBT,EAAQO,KAAKG,QAErC,6BAAKhB,EAAeM,GAASW,mB,GAVpBC,IAAMC,WAgBzBT,EAAqB,CACvBC,KAAM,CACFS,cAAe,QAQRf,IC3BA,SAASgB,IAAS,IAAD,EACIC,mBAAoB,IADxB,mBACrBC,EADqB,KACXC,EADW,KAO5B,GAJAC,qBAAU,YHNP,SAAP,mCGOQC,EAAgB,GAAOC,MAAK,SAACC,GAAD,OAAgBJ,EAAW,OAACI,QAAD,IAACA,OAAD,EAACA,EAAML,eAC/D,IAEEA,EAEE,CACH,IAAMM,EAAgBN,EAASO,KAAKjC,GAEpC,OADAF,QAAQoC,IAAIF,GAER,mCACKN,EAASO,KAAKjC,GAAamC,KAAI,SAAC1B,GAAD,OAC5B,cAAC,EAAD,CAAYA,QAASA,SAPjC,OAAO,oDCZf,IAIe2B,EAJH,WACR,OAAO,cAAC,EAAD,KCUIC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,K","file":"static/js/main.29ae96d8.chunk.js","sourcesContent":["import playerData from '../mock/playerData.json'\r\n\r\nimport { API_URL_PREFIX } from './ApiConstants'\r\n\r\nexport async function fetchPlayerData(isMock: boolean) {\r\n    if (!!isMock) {\r\n        return playerData\r\n    } else {\r\n        try {\r\n            const response = await fetch(\r\n                'https://cors-anywhere.herokuapp.com/https://mlb21.theshow.com/apis/listings.json'\r\n            )\r\n            return response.json()\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n}\r\n","import type {Listing} from './ListingsTypeDefinitions'\r\n\r\nexport const sortPlayers = (player1: Listing, player2: Listing): number => {\r\n    return getTakeHomeAmt(player2) - getTakeHomeAmt(player1)\r\n}\r\n\r\nexport const getTakeHomeAmt = (player: Listing): number => {\r\n    const tenPercent = player.best_sell_price * .1\r\n    const sellPrice = player.best_sell_price - tenPercent\r\n    const takeHomeAmt =  sellPrice - player.best_buy_price\r\n    return  takeHomeAmt\r\n}","import React from 'react'\r\nimport type { Listing } from '../ListingsTypeDefinitions'\r\nimport { getTakeHomeAmt } from '../listingsUtils'\r\n\r\ntype Props = {\r\n    listing: Listing\r\n}\r\n\r\nclass PlayerTile extends React.Component<Props> {\r\n    render() {\r\n        const { listing } = this.props\r\n\r\n        return (\r\n            <div style={styles.tile}>\r\n                <img src={listing.item.img} />\r\n                <h1>\r\n                    {listing.item.ovr} {listing.item.name}\r\n                </h1>\r\n                <h2>{getTakeHomeAmt(listing).toFixed()}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles: StyleSheet = {\r\n    tile: {\r\n        flexDirection: 'row',\r\n    },\r\n}\r\n\r\ninterface StyleSheet {\r\n    [key: string]: React.CSSProperties\r\n}\r\n\r\nexport default PlayerTile\r\n","import React, { useEffect, useState } from 'react'\r\nimport { fetchPlayerData } from '../../api/fetch'\r\n\r\nimport PlayerTile from './components/PlayerTile'\r\nimport type { Page, Listing } from './ListingsTypeDefinitions'\r\nimport { sortPlayers } from './listingsUtils'\r\n\r\nexport default function Board() {\r\n    const [listings, setListings] = useState<Listing[]>([])\r\n\r\n    useEffect(() => {\r\n        fetchPlayerData(false).then((data: Page) => setListings(data?.listings))\r\n    }, [])\r\n\r\n    if (!listings) {\r\n        return <p>Error fetching data</p>\r\n    } else {\r\n        const sortedPlayers = listings.sort(sortPlayers)\r\n        console.log(sortedPlayers)\r\n        return (\r\n            <>\r\n                {listings.sort(sortPlayers).map((listing: Listing) => (\r\n                    <PlayerTile listing={listing} />\r\n                ))}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\nimport Listings from './listings/listingsScreen'\n\nconst App = () => {\n    return <Listings />\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './ts/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}